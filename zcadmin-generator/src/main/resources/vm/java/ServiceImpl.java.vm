package ${package}.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${package}.mapper.${className}Mapper;
import ${package}.entity.${className};
import ${package}.service.${className}Service;
import com.zc.utils.SqlListHandleUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * ${tableComment} 服务层实现
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
@RequiredArgsConstructor
public class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}> implements ${className}Service {

    private final ${className}Mapper ${classname}Mapper;

    /**
     * 查询${tableComment}信息
     *
     * @param id ${tableComment}ID
     * @return ${tableComment}信息
     */
    @Override
    public ${className} selectByPrimaryKey(${primaryKey.columnJavaType} id) {
        return ${classname}Mapper.selectByPrimaryKey(id);
    }


    /**
     * 根据条件,查询${tableComment}列表
     *
     * @param record ${tableComment}信息
     * @return ${tableComment}集合
     */
    @Override
    public List<${className}> selectListBySelective(${className} record) {
        return ${classname}Mapper.selectListBySelective(record);
    }

    /**
     * 根据条件,查询第一个${tableComment}对象(一般用于条件可以确定唯一数据)
     *
     * @param record ${tableComment}信息
     * @return ${tableComment}
     */
    @Override
    public ${className} selectOneBySelective(${className} record) {
        return ${classname}Mapper.selectOneBySelective(record);
    }

    /**
     * 根据条件,分页查询${tableComment}列表
     *
     * @param record ${tableComment}信息
     * @param page mybatis-plus 分页对象
     * @return ${tableComment}集合
     */
    @Override
    public IPage<${className}> selectPageBySelective(${className} record, Page page) {
        return ${classname}Mapper.selectPageBySelective(record, page);
    }

    /**
     * 根据主键集合,批量查询${tableComment}列表
     *
     * @param ids ${tableComment}主键List集合
     * @return ${tableComment}集合
     */
    @Override
    public List<${className}> selectByPrimaryKeys(List<${primaryKey.columnJavaType}> ids) {
        if (ids == null || ids.size() <= 0) {
            return null;
        }
        return ${classname}Mapper.selectByPrimaryKeys(ids);
    }


    /**
     * 查询符合条件的语句数量
     *
     * @param record ${tableComment} 信息
     * @return 查询结果数量
     */
    @Override
    public int selectCountBySelective(${className} record) {
        return ${classname}Mapper.selectCountBySelective(record);
    }

    /**
     * 插入单条数据
     *
     * @param record ${tableComment} 信息
     * @return 插入数量
     */
    @Override
    public int insert(${className} record) {
        return ${classname}Mapper.insert(record);
    }

    /**
     * 条件插入单条数据
     *
     * @param record ${tableComment} 信息
     * @return 插入数量
     */
    @Override
    public int insertSelective(${className} record) {
        return ${classname}Mapper.insertSelective(record);
    }

    /**
     * 批量插入多条数据
     *
     * @param recordList ${tableComment}集合
     * @return 插入数量
     */
    @Override
    @Transactional
    public int insertBatch(List<${className}> recordList) {
        int result = 0;
        if (recordList == null || recordList.size() <= 0) {
            return result;
        }
        List<List<${className}>> list = SqlListHandleUtils.splitList(recordList, 50);
        for (List<${className}> records : list) {
            int count = ${classname}Mapper.insertBatch(records);
            result = result + count;
        }
        return result;
    }

    /**
     * 修改单条数据,若部分属性为null,则将数据库中的数据也修改为null
     *
     * @param record ${tableComment} 信息
     * @return 修改数量
     */
    @Override
    public int update(${className} record) {
        return ${classname}Mapper.update(record);
    }

    /**
     * 修改单条数据,仅修改存在数值的属性
     *
     * @param record ${tableComment} 信息
     * @return 修改数量
     */
    @Override
    public int updateSelective(${className} record) {
        return ${classname}Mapper.updateSelective(record);
    }


    /**
    * 根据条件修改某些参数,仅修改存在数值的属性
    *
    * @param  params  需要修改的信息
    * @param  record  根据的条件信息
    * @return 修改数量
    */
    @Override
    public int updateParamsBySelective(${className} params,${className} record) {
        return ${classname}Mapper.updateParamsBySelective(params, record);
    }


    /**
     * 修改多条数据,若部分属性为null,则将数据库中的数据也修改为null
     *
     * @param recordList ${tableComment} 集合
     * @return 修改数量
     */
    @Override
    @Transactional
    public int updateBatch(List<${className}> recordList) {
        int result = 0;
        if (recordList == null || recordList.size() <= 0) {
            return result;
        }
        List<List<${className}>> list = SqlListHandleUtils.splitList(recordList, 50);
        for (List<${className}> records : list) {
            int count = ${classname}Mapper.updateBatch(records);
            result = result + count;
        }
        return result;
    }

    /**
     * 修改多条数据,仅修改存在数值的属性
     *
     * @param recordList ${tableComment} 集合
     * @return 修改数量
     */
    @Override
    @Transactional
    public int updateBatchBySelective(List<${className}> recordList) {
        int result = 0;
        if (recordList == null || recordList.size() <= 0) {
            return result;
        }
        List<List<${className}>> listLists = SqlListHandleUtils.splitList(recordList, 50);
        for (List<${className}> records : listLists) {
            int count = ${classname}Mapper.updateBatchSelective(records);
            result = result + count;
        }
        return result;
    }

    /**
    * 根据条件删除数据
    *
    * @param record  删除的条件
    * @return 删除数量
    */
    public int deleteBySelective(${className} record){
        return ${classname}Mapper.deleteBySelective(record);
    }


    /**
     * 根据主键删除数据
     *
     * @param id ${tableComment} 主键
     * @return 删除数量
     */
    @Override
    public int deleteByPrimaryKey(${primaryKey.columnJavaType} id) {
        return ${classname}Mapper.deleteByPrimaryKey(id);
    }

    /**
     * 根据主键集合删除数据
     *
     * @param ids ${tableComment} 主键集合
     * @return 删除数量
     */
    @Override
    public int deleteByPrimaryKeys(List<${primaryKey.columnJavaType}> ids) {
        if (ids == null || ids.size() <= 0) {
            return 0;
        }
        return ${classname}Mapper.deleteByPrimaryKeys(ids);
    }

}
