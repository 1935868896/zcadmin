##修改package 名字
package ${package}.controller;
## 此处固定的三方jar包
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;
import java.util.List;
##此处引用自己编写的jar包
import com.zc.annotation.Log;
import com.zc.entity.ResultResponse;
##此处引用实体类
import ${package}.entity.${className};
import ${package}.service.${className}Service;
/**
 * ${tableComment} 信息操作处理
 *
 * @author ${author}
 * @date ${datetime}
 */

@RestController
@RequiredArgsConstructor
@RequestMapping("/${moduleName}/${classname}")
@Api(tags = "${tableComment}信息管理")
public class ${className}Controller {
    private final ${className}Service ${classname}Service;



    @Log
    @GetMapping("count")
    @ApiOperation("根据条件查询数量")
    public ResultResponse count(${className} record) {
        int result = ${classname}Service.selectCountBySelective(record);
        return ResultResponse.success(result);
    }

    @Log
    @GetMapping
    @ApiOperation("根据条件得到数据 List<Object> 集合")
    public ResultResponse get(${className} record) {
        List<${className}> result = ${classname}Service.selectListBySelective(record);
        if (result != null && result.size() > 0) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }

    ## 这里需要修改
    @Log
    @GetMapping("/id")
    @ApiOperation("根据id获得对象数据")
    public ResultResponse getById(${primaryKey.attrType} id) {
        ${className} result = ${classname}Service.selectByPrimaryKey(id);
        if (result != null) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }

    @GetMapping("/ids")
    @ApiOperation("根据id集合获得目标数据集合")
    public ResultResponse getByIds(List<${primaryKey.attrType}> ids) {
        List<${className}> result = ${classname}Service.selectByPrimaryKeys(ids);
        if (result != null && result.size() > 0) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }

    @ApiOperation("分页获得目标数据集合")
    @GetMapping("page")
    public ResultResponse getPageResults(${className} record, Page page) {
        IPage<${className}> recordIPage = ${classname}Service.selectPageBySelective(record, page);
        return ResultResponse.success(recordIPage);
    }

    @ApiOperation("插入单条数据")
    @PostMapping
    public ResultResponse insert(@RequestBody ${className} record) {
        int result = ${classname}Service.insert(record);
        if (result > 0) {
            return ResultResponse.success(record);
        }
        return ResultResponse.error();
    }

    @ApiOperation("批量插入数据")
    @PostMapping("batch")
    public ResultResponse insertBatch(@RequestBody List<${className}> records) {
        int result = ${classname}Service.insertBatch(records);
        if (result > 0) {
            return ResultResponse.success(records);
        }
        return ResultResponse.error();
    }

    @ApiOperation("修改数据")
    @PutMapping
    public ResultResponse update(@RequestBody ${className} record) {
        int result = ${classname}Service.updateByPrimaryKey(record);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }

    @ApiOperation("修改数据,仅修改不为null的数据")
    @PutMapping("/selective")
    public ResultResponse updateByPrimaryKeySelective(${className} record) {
        int result = ${classname}Service.updateByPrimaryKeySelective(record);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }

    @ApiOperation("批量修改数据")
    @PutMapping("batch")
    public ResultResponse updateBatch(List<${className}> records) {
        int result = ${classname}Service.updateBatch(records);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }

    @ApiOperation("批量修改数据,仅修改不为null的数据")
    @PutMapping("batch/selective")
    public ResultResponse updateBatchSelective(List<${className}> records) {
        int result = ${classname}Service.updateBatchSelective(records);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }

    @ApiOperation("删除数据")
    @DeleteMapping()
    public ResultResponse delete(${primaryKey.attrType} id) {
        int result = ${classname}Service.deleteByPrimaryKey(id);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }

    @ApiOperation("根据id集合批量删除数据")
    @DeleteMapping("ids")
    public ResultResponse deleteBatch(List<${primaryKey.attrType}> ids) {
        int result = ${classname}Service.deleteByPrimaryKeys(ids);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }


}
