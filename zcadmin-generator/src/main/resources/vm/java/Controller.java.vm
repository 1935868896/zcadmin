##修改package 名字
package ${package}.controller;
    ## 此处固定的三方jar包
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;
import java.util.List;

import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
##此处引用自己编写的jar包
import com.zc.annotation.Log;
import com.zc.entity.ResultResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import com.zc.exception.BadRequestException;

##此处引用实体类
import ${package}.entity.${className};
import ${package}.service.${className}Service;
### 此处为
#foreach ($column in $columns)
    #if($column.columnName == 'create_by'||$column.columnName == 'update_by')
import com.zc.utils.SecurityUtils;
        #break
    #end
#end
###
#foreach ($column in $columns)
    #if($column.columnName == 'create_time'||$column.columnName == 'update_time')
import cn.hutool.core.date.DateTime;
        #break
    #end
#end


/**
 * ${tableComment} 信息操作处理
 *
 * @author ${author}
 * @date ${datetime}
 */

@RestController
@RequiredArgsConstructor
@RequestMapping("/${moduleName}/${classname}")
@Api(tags = "${tableComment}信息管理")
public class ${className}Controller {
    private final ${className}Service ${classname}Service;

#foreach($method in $codeMethodConfigs)

#if($method.methodName=='getObjectById')
    @ApiOperationSupport(order = 1)
    @GetMapping("/id")
    @ApiOperation("根据主键获得对象数据")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse getObjectById(${primaryKey.columnJavaType} id) {
        ${className} result = ${classname}Service.selectObjectById(id);
        if (result != null) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }
#end
#if($method.methodName=='getListByParam')
    @ApiOperationSupport(order = 2)
    @GetMapping
    @ApiOperation("根据条件查询得到对象集合")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse getListByParam(${className} record) {
        List<${className}> result = ${classname}Service.selectListByParam(record);
        if (result != null && result.size() > 0) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }
#end
#if($method.methodName=='getOneByParam')
    @ApiOperationSupport(order = 3)
    @GetMapping("/single")
    @ApiOperation("根据条件查询得到单个对象")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse getOneByParam(${className} record) {
        ${className} result = ${classname}Service.selectOneByParam(record);
        if (result != null) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }
#end
#if($method.methodName=='getListByIds')
    @ApiOperationSupport(order = 4)
    @GetMapping("/ids")
    @ApiOperation("根据id集合获得目标数据集合")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse getListByIds(@RequestParam(value = "ids", required = false) List<${primaryKey.columnJavaType}> ids) {
        List<${className}> result = ${classname}Service.selectListByIds(ids);
        if (result != null && result.size() > 0) {
            return ResultResponse.success(result);
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='getPageByParam')
    @ApiOperationSupport(order = 5)
    @ApiOperation("分页获得目标数据集合")
    @GetMapping("page")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse getPageByParam(${className} record, Page page) {
        IPage<${className}> recordIPage = ${classname}Service.selectPageByParam(record, page);
        return ResultResponse.success(recordIPage);
    }
#end

#if($method.methodName=='getCountByParam')
    @ApiOperationSupport(order = 6)
    @Log("${tableComment}信息管理:根据条件查询符合数据的数量")
    @GetMapping("count")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse getCountByParam(${className} record) {
        int result = ${classname}Service.selectCountByParam(record);
        return ResultResponse.success(result);
    }
#end

#if($method.methodName=='insertOne')
    @ApiOperationSupport(order = 7)
    @ApiOperation("插入单条数据")
    @PostMapping
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse insertOne(@RequestBody ${className} record) {
        if (record==null){
            throw new BadRequestException("插入数据为空");
        }
#foreach ($column in $columns)
    #if($column.columnName == 'create_by')
        record.setCreateBy(SecurityUtils.getCurrentUsername());
    #elseif($column.columnName == 'create_time')
        record.setCreateTime(new DateTime());
    #end
#end
        int result = ${classname}Service.insertOne(record);
        if (result > 0) {
            return ResultResponse.success(record);
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='insertBatch')
    @ApiOperationSupport(order = 8)
    @ApiOperation("批量插入数据")
    @PostMapping("batch")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse insertBatch(@RequestBody List<${className}> records) {
        if (records.isEmpty()){
            throw new BadRequestException("批量插入数据为空");
        }
#foreach ($column in $columns)
#if($column.columnName == 'create_by'||$column.columnName == 'create_time')
        for (BookInfo record : records) {
#foreach ($column in $columns)
    #if($column.columnName == 'create_by')
            record.setCreateBy(SecurityUtils.getCurrentUsername());
    #elseif($column.columnName == 'create_time')
            record.setCreateTime(new DateTime());
    #end
#end
        }
#break
#end
#end
        int result = ${classname}Service.insertBatch(records);
        if (result > 0) {
            return ResultResponse.success(records);
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='updateById')
    @ApiOperationSupport(order = 9)
    @ApiOperation("修改数据")
    @PutMapping
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse updateById(@RequestBody ${className} record) {
        if (record==null){
            throw new BadRequestException("修改数据为空");
        }
#foreach ($column in $columns)
    #if($column.columnName == 'update_by')
        record.setUpdateBy(SecurityUtils.getCurrentUsername());
    #elseif($column.columnName == 'update_time')
        record.setUpdateTime(new DateTime());
        #end
#end
        int result = ${classname}Service.updateById(record);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='updateByParam')
    @ApiOperationSupport(order = 10)
    @ApiOperation("修改数据,仅修改不为null的数据")
    @PutMapping("/selective")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse updateByParam(@RequestBody ${className} record) {
        if (record==null){
            throw new BadRequestException("修改数据为空");
        }
#foreach ($column in $columns)
    #if($column.columnName == 'update_by')
        record.setUpdateBy(SecurityUtils.getCurrentUsername());
    #elseif($column.columnName == 'update_time')
        record.setUpdateTime(new DateTime());
    #end
#end
        int result = ${classname}Service.updateByParam(record);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='updateBatch')
    @ApiOperationSupport(order = 11)
    @ApiOperation("批量修改数据")
    @PutMapping("batch")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse updateBatch(@RequestBody List<${className}> records) {
        if (records.isEmpty()){
            throw new BadRequestException("批量修改数据为空");
        }
#foreach ($column in $columns)
#if($column.columnName == 'update_by'||$column.columnName == 'update_time')
        for (BookInfo record : records) {
#foreach ($column in $columns)
    #if($column.columnName == 'update_by')
        record.setUpdateBy(SecurityUtils.getCurrentUsername());
        #elseif($column.columnName == 'update_time')
            record.setUpdateTime(new DateTime());
    #end
#end
        }
#break
#end
#end
        int result = ${classname}Service.updateBatch(records);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='updateBatchByParam')
    //如果某批数据中,有一个数据属性存在值,其他数据的属性不存在值,那么最终修改结果为其他数据的该属性将设为null值
    @ApiOperationSupport(order = 12)
    @ApiOperation("批量修改数据,仅修改部分属性")
    @PutMapping("batch/selective")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse updateBatchByParam(@RequestBody List<${className}> records) {
        if (records.isEmpty()){
            throw new BadRequestException("批量修改数据为空");
        }
#foreach ($column in $columns)
#if($column.columnName == 'update_by'||$column.columnName == 'update_time')
        for (BookInfo record : records) {
#foreach ($column in $columns)
    #if($column.columnName == 'update_by')
        record.setUpdateBy(SecurityUtils.getCurrentUsername());
        #elseif($column.columnName == 'update_time')
            record.setUpdateTime(new DateTime());
    #end
#end
        }
#break
#end

#end
        int result = ${classname}Service.updateBatchByParam(records);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='deleteById')
    @ApiOperationSupport(order = 13)
    @ApiOperation("根据主键删除数据")
    @DeleteMapping()
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse deleteById(${primaryKey.columnJavaType} id) {
        int result = ${classname}Service.deleteById(id);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end

#if($method.methodName=='deleteListByParam')
    @ApiOperationSupport(order = 14)
    @ApiOperation("根据条件删除数据")
    @DeleteMapping("bySelective")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse deleteListByParam(@RequestBody ${className} record) {
        int result = ${classname}Service.deleteListByParam(record);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end



#if($method.methodName=='deleteListByIds')
    @ApiOperationSupport(order = 15)
    @ApiOperation("根据主键集合批量删除数据")
    @DeleteMapping("ids")
    #if($method.logRecord)
    @Log("${tableComment}信息管理:$method.description")
    #end
    #if($method.anonymous)
    @PreAuthorize("@el.check('${classname}:$method.methodName')")
    #end
    public ResultResponse deleteListByIds(@RequestBody List<${primaryKey.columnJavaType}> ids) {
        int result = ${classname}Service.deleteListByIds(ids);
        if (result > 0) {
            return ResultResponse.success();
        }
        return ResultResponse.error();
    }
#end
#end
}
