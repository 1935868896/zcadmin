package ${package}.mapper;

import ${package}.entity.${className};
import java.util.List;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Mapper;

/**
 * ${tableComment} 数据层
 *
 * @author ${author}
 * @date ${datetime}
 */
@Mapper
public interface ${className}Mapper extends BaseMapper<${className}> {

    /**
     * 查询${tableComment}信息
     *
     * @param id ${tableComment}ID
     * @return ${tableComment}信息
     */
    ${className} selectByPrimaryKey(${primaryKey.attrType} id);


    /**
     * 根据条件,查询${tableComment}列表
     *
     * @param record ${tableComment}信息
     * @return ${tableComment}集合
     */
    List<${className}> selectListBySelective(${className} record);

    /**
     * 根据条件,分页查询${tableComment}列表
     *
     * @param record ${tableComment}信息
     * @param page mybatis-plus 分页对象
     * @return ${tableComment}集合
     */
    IPage<${className}> selectPageBySelective(${className} record, Page page);
    /**
     * 根据主键集合,批量查询${tableComment}列表
     *
     * @param ids ${tableComment}主键List集合
     * @return ${tableComment}集合
     */
    List<${className}> selectByPrimaryKeys(List<${primaryKey.attrType}> ids);

    /**
     * 查询符合条件的语句数量
     *
     * @param record ${tableComment} 信息
     * @return 查询结果数量
     */
    int selectCountBySelective(${className} record);


    /**
     * 插入单条数据
     *
     * @param record ${tableComment} 信息
     * @return 插入数量
     */
    int insert(${className} record);
    /**
     * 条件插入单条数据
     *
     * @param record ${tableComment} 信息
     * @return 插入数量
     */
    int insertSelective(${className} record);
    /**
     * 批量插入多条数据
     *
     * @param recordList ${tableComment}集合
     * @return 插入数量
     */
    int insertBatch(List<${className}> recordList);
    /**
     * 修改单条数据,若部分属性为null,则将数据库中的数据也修改为null
     *
     * @param record ${tableComment} 信息
     * @return 修改数量
     */
    int update(${className} record);
    /**
     * 修改单条数据,仅修改存在数值的属性
     *
     * @param record ${tableComment} 信息
     * @return 修改数量
     */
    int updateBySelective(${className} record);


    /**
     * 修改多条数据,若部分属性为null,则将数据库中的数据也修改为null
     *
     * @param recordList ${tableComment} 集合
     * @return 修改数量
     */
    int updateBatch(List<${className}> recordList);
    /**
     * 修改多条数据,仅修改存在数值的属性
     *
     * @param recordList ${tableComment} 集合
     * @return 修改数量
     */
    int updateBatchSelective(List<${className}> recordList);
    /**
     * 根据主键删除数据
     *
     * @param id ${tableComment} 主键
     * @return 删除数量
     */
    int deleteByPrimaryKey(${primaryKey.attrType} id);
    /**
     * 根据主键集合删除数据
     *
     * @param ids ${tableComment} 主键集合
     * @return 删除数量
     */
    int deleteByPrimaryKeys(List<${primaryKey.attrType}> ids);

}