<template>
    <div class="app-container">
        <div class="filter-container">
            <!-- 1. 此处是上方的查询条 -->
            <!--  类型1 : input 查询功能 -->
#foreach($column in $columns)
#if(${column.searchShow})
    #if($column.columnType=="data" ||$column.columnType=="datetime")
        <el-date-picker
                v-model="dateTime"
                class="filter-item"
                type="datetimerange"
                style="margin-left: 10px"
                value-format="yyyy-MM-dd HH:mm:ss"
                range-separator="至"
                start-placeholder="开始日期"
                end-placeholder="结束日期"
        />
    #else
        <el-input
                v-model="paramQuery.${column.attrNameFirstToLow}"
                placeholder="${column.remark}"
                style="width: 200px"
                class="filter-item"
                @keyup.enter.native="handleFilter"
        />
    #end

#end
#end

            <el-button
                    v-waves
                    class="filter-item"
                    style="margin-left: 10px"
                    type="primary"
                    icon="el-icon-search"
                    @click="handleFilter"
            >
                Search
            </el-button>
            <el-button
                    class="filter-item"
                    style="margin-left: 10px"
                    type="primary"
                    icon="el-icon-edit"
                    @click="handleCreate"
            >
                Add
            </el-button>
            <el-button
                    v-waves
                    :loading="downloadLoading"
                    class="filter-item"
                    type="primary"
                    icon="el-icon-download"
                    @click="handleDownload"
            >
                Export
            </el-button>
        </div>

        <!-- 表格功能  -->
        <el-table
                v-loading="listLoading"
                :data="dataList"
                border
                fit
                highlight-current-row
                style="width: 100%"
                @sort-change="sortChange"
        >
            <!-- 方法1 -->
#foreach($column in $columns)
#if(${column.listShow})
    #if($column.keyType == "PRI")
        <!-- label 列名  {{内容}} -->
        <el-table-column
                label="ID"
                prop="${column.attrNameFirstToLow}"
                sortable="custom"
                align="center"
                width="80"
        >
            <template slot-scope="{ row }">
                <span>{{ row.${column.attrNameFirstToLow} }}</span>
            </template>
        </el-table-column>
    #else
    <el-table-column
            prop="${column.attrNameFirstToLow}"
            sortable="custom"
            label="${column.remark}"
            min-width="150px">
        <template slot-scope="{ row }">
            <span>{{ row.${column.attrNameFirstToLow}}}</span>
        </template>
    </el-table-column>
#end
#end
#end

            <!-- 操作 -->
            <el-table-column
                    label="操作"
                    align="center"
                    width="230"
                    class-name="small-padding fixed-width"
            >
                <template slot-scope="{ row, $index }">
                    <!-- 操作1：简单的按钮模式 -->
                    <el-button type="primary" size="mini" @click="handleUpdate(row)">
                        Edit
                    </el-button>
                    <el-button
                            v-if="row.status != 'deleted'"
                            size="mini"
                            type="danger"
                            @click="handleDelete(row, $index)"
                    >
                        Delete
                    </el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 分页 -->
        <pagination
                v-show="total > 0"
                :total="total"
                :page.sync="pageQuery.current"
                :limit.sync="pageQuery.size"
                @pagination="getList"
        />
        <!-- 表单功能 el-dialog  -->
        <!-- 表单功能 el-dialog  -->
        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
            <el-form
                    ref="dataForm"
                    :rules="rules"
                    :model="temp"
                    :inline="true"
                    label-position="left"
                    label-width="100px"
                    style="width: 750px;"
            >
                #foreach($column in $columns)
                    #if(${column.formShow})
                        #if($column.keyType != "PRI")
                        #if($column.formType=='date')
                            <el-form-item label="${column.remark}" prop="timestamp">
                                <el-date-picker
                                        v-model="temp.${column.attrNameFirstToLow}"
                                        value-format="yyyy-MM-dd HH:mm:ss"
                                        type="datetime"
                                        placeholder="Please pick a date"
                                />
                            </el-form-item>
                        #elseif($column.formType=='radio')
                            <el-form-item label="${column.remark}">
                                <el-radio-group v-model="temp.${column.attrNameFirstToLow}" style="width: 200px">
                            #foreach($dictDetail in ${column.dictDetailList})
                                    <el-radio :label="${dictDetail.value}">${dictDetail.label}</el-radio>
                            #end
                                </el-radio-group>
                            </el-form-item>
                        #elseif($column.formType=='select')
                            <el-form-item label="${column.remark}">
                                <el-select v-model="temp.${column.attrNameFirstToLow}" placeholder="请选择" style="width: 200px">
                                    <el-option
                                            v-for="item in ${column.attrNameFirstToLow}-options"
                                            :key="item.value"
                                            :label="item.label"
                                            :value="item.detailId">
                                    </el-option>
                                </el-select>
                            </el-form-item>
                        #elseif($column.formType=='text-area')
                            <el-form-item label="${column.remark}">
                                <el-input v-model="temp.${column.attrNameFirstToLow}" style="width: 510px;" rows="4" type="textarea" />
                            </el-form-item>
                        #else
                            <el-form-item label="${column.remark}">
                                <el-input v-model="temp.${column.attrNameFirstToLow}" style="width: 200px;" />
                            </el-form-item>
                        #end
                    #end
                    #end
                #end
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false"> Cancel </el-button>
                <el-button
                        type="primary"
                        @click="dialogStatus === 'create' ? createData() : updateData()"
                >
                    Confirm
                </el-button>
            </div>
        </el-dialog>
    </div>
</template>

<script>
    // 导入模块
    import {
        fetchList,
        create,
        update,
        deleteData
    } from '@/api/$vueModuleName/$vueTableName'
    import waves from '@/directive/waves' // waves directive
    import { parseTime } from '@/utils'
    import Pagination from '@/components/Pagination' // secondary package based on el-pagination

    export default {
        name: 'ComplexTable',
        components: { Pagination },
        directives: { waves },
        data() {
            return {
                downloadLoading: false,
                listLoading: true,
                dialogFormVisible: false,
                dialogStatus: '',
                textMap: {
                    update: 'Edit',
                    create: 'Create'
                },
                total: 0,
                pageQuery: {
                    current: 1,
                    size: 10,
                    beginTime: undefined,
                    afterTime: undefined,
                    orders: []
                },
                dateTime: [],
                dataList: null,
                paramQuery: {},
                temp: {
                },
                rules: {

                },
#foreach($column in $columns)
#if(${column.formShow})
#if($column.keyType != "PRI")
#if($column.formType=='select')
                ${column.attrNameFirstToLow}-options: [
    #foreach($dictDetail in ${column.dictDetailList})
        {
            value: '${dictDetail.value}',
            label: '${dictDetail.label}'
        },
    #end
                ],
#end
#end
#end
#end

            }
        },
        created() {
            this.getList()
        },
        methods: {
            // 方法: 增删改查:
            // getList() 查: 不带任何参数,根据分页查询数据
            // handleFilter() 查: 带参查询
            // handleCreate() 创建: 调出create表单
            // hanleUpdate() 修改: 调出update表单
            // createData() 根据参数 插入数据
            // updateData() 根据参数 修改数据
            // handleDownload() 下载数据    // formatJson()
            //
            sortChange(data) {
                const { prop, order } = data
                const propToLine = prop.replace(/([A-Z])/g, '_$1').toLowerCase()
                this.sortByID(order, propToLine)
            },
            sortByID(order, prop) {
                this.pageQuery.orders = []
                if (order === 'ascending') {
                    this.pageQuery.orders.push({
                        asc: true,
                        column: prop })
                } else {
                    this.pageQuery.orders.push({
                        asc: false,
                        column: prop
                    })
                }
                this.handleFilter()
            },
            resetTemp() {
                this.temp = {
#foreach($column in $columns)
        ${column.attrNameFirstToLow}: undefined,
#end
                }
            },

            getList() {
                this.listLoading = true
                fetchList(this.paramQuery, this.pageQuery).then((response) => {
                    this.dataList = response.data.records
                    this.total = response.data.total
                    // Just to simulate the time of the request
                    setTimeout(() => {
                        this.listLoading = false
                    }, 1.5 * 1000)
                })
            },
            handleFilter() {
                this.pageQuery.page = 1

                if (this.dateTime != null) {
                    this.pageQuery.beginTime = this.dateTime[0]
                    this.pageQuery.afterTime = this.dateTime[1]
                }
                this.getList()
            },

            handleCreate() {
                this.resetTemp()
                this.dialogStatus = 'create'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
        #set($data1="$refs['dataForm']")
        #set($data2=".validate((valid) => {")

            createData() {
                this.$data1$data2
                if (valid) {
                create(this.temp).then(() => {
                this.list.unshift(this.temp)
                this.dialogFormVisible = false
                this.$notify({
                title: 'Success',
                message: '创建成功',
                type: 'success',
                duration: 2000
                })
                })
                }
                })
            },
            handleUpdate(row) {
                this.temp = Object.assign({}, row) // copy obj
                this.dialogStatus = 'update'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
            updateData() {
                this.$data1$data2
                if (valid) {
                const tempData = Object.assign({}, this.temp)
                update(tempData).then(() => {
                const index = this.list.findIndex((v) => v.id === this.temp.${primaryKey.attrNameFirstToLow})
                this.list.splice(index, 1, this.temp)
                this.dialogFormVisible = false
                this.$notify({
                title: 'Success',
                message: '修改成功',
                type: 'success',
                duration: 2000
                })
                })
                }
                })
            },
            handleDelete(row, index) {
                this.$confirm('此操作将删除该文件, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                })
                        .then(() => {
                            deleteData(row.${primaryKey.attrNameFirstToLow}).then((res) => {
                                this.list.splice(index, 1)
                                this.$message({
                                    type: 'info',
                                    message: '已成功删除'
                                })
                            })
                        })
                        .catch(() => {
                            this.$message({
                                type: 'info',
                                message: '已取消删除'
                            })
                        })
            },
            handleDownload() {
                this.downloadLoading = true
                import('@/vendor/Export2Excel').then((excel) => {
                    const tHeader = ['timestamp', 'title', 'type', 'importance', 'status']
                    const filterVal = [
                        'timestamp',
                        'title',
                        'type',
                        'importance',
                        'status'
                    ]
                    const data = this.formatJson(filterVal)
                    excel.export_json_to_excel({
                        header: tHeader,
                        data,
                        filename: 'table-list'
                    })
                    this.downloadLoading = false
                })
            },
            formatJson(filterVal) {
                return this.list.map((v) =>
                        filterVal.map((j) => {
                            if (j === 'timestamp') {
                                return parseTime(v[j])
                            } else {
                                return v[j]
                            }
                        })
                )
            },
        }
    }
</script>
